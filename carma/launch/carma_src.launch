<?xml version="1.0"?>
<!--
  Copyright (C) 2018-2021 LEIDOS.

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
-->
<!--
	carma_src.launch

  The ros launch file for the CARMA 3 Platform ROS Network.
  Launches all the needed ros nodes and sets up the parameter server.
  Also sets up all static transforms used by tf2 within the system.

  Use:
  roslaunch carma carma.launch
  After using source devel/setup.bash from workspace root.

  If not using simulated drivers they are activated using ros arguments as shown below.
  roslaunch carma carma.launch mock_drivers="can"
-->
<launch>

  <!-- Directory of vehicle config parameters -->
  <arg name="vehicle_config_dir" default="/opt/carma/vehicle/config" doc="The directory continaing vehicle config type parameters"/>
  <arg name="vehicle_calibration_dir" default="/opt/carma/vehicle/calibration" doc="The directory continaing vehicle calibration type parameters"/>
  <arg name="yolo_dir" default="/opt/carma/yolo" doc="The directory continaing yolo weights files for the perception stack"/>
  <arg name="cuda" default="true" doc="cuda flag for vision_darknet_detect (true if cuda is available)"/>
  <arg name="enable_guidance_plugin_validator" default="false" doc="Flag indicating whether the Guidance Plugin Validator node will actively validate guidance strategic, tactical, and control plugins"/>
  <arg name="strategic_plugins_to_validate" default="[]" doc="List of String: Guidance Strategic Plugins that will be validated by the Guidance Plugin Validator Node if enabled"/>
  <arg name="tactical_plugins_to_validate" default="[]" doc="List of String: Guidance Tactical Plugins that will be validated by the Guidance Plugin Validator Node if enabled"/>
  <arg name="control_plugins_to_validate" default="[]" doc="List of String: Guidance Control Plugins that will be validated by the Guidance Plugin Validator Node if enabled"/>
  <arg name="combined_lidar_frame" default="velodyne" doc="Frame of the lidar(s)"/>

	<!-- Startup Drivers With Main CARMA System -->
  <arg name="launch_drivers" default="true" doc="True if drivers are to be launched with the CARMA Platform, overrides mock_drivers arg if false"/>

  <!-- Simulation Usage -->
  <arg name="mock_drivers" 
    default="controller can comms gnss radar lidar camera roadway_sensor imu"
    doc="List of driver node base names which will be launched as mock drivers"
  />
  <arg name="simulation_mode" default="false" doc="True if CARMA Platform is launched with CARLA Simulator"/>

  <!-- Logging -->
  <!-- ROS Bag -->
  <arg name="use_rosbag" default="true" doc="Record a rosbag"/>
  <arg name="rosbag_exclusions" default="/fake_exclusion" doc="Additonal regex pattern to match for identifying what topics to exclude from rosbag recordings"/>
  
  <!-- Map files to load -->
  <arg name="arealist_path" default="arealist.txt" doc="Path to the arealist.txt file which contains the paths and dimensions of each map cell to load"/>
  <arg name="load_type" default="noupdate" doc="Enum of the map loading approach to use. Can be 'download', 'noupdate', or 'arealist'"/> 
  <arg name="single_pcd_path" default="/opt/carma/maps/pcd_map.pcd" doc="Path to the map pcd file if using the noupdate load type"/>
  <arg name="area" default="1x1" doc="Dimensions of the square of cells loaded at runtime using the download and arealist load types"/>
  <arg name="vector_map_file" default="/opt/carma/maps/vector_map.osm" doc="Path to the map osm file if using the noupdate load type"/>

  <!-- Route File Locations -->
  <arg name="route_file_folder" default="/opt/carma/routes/" doc="Path of folder containing routes to load"/>

  <!-- Load Vehicle Characteristics -->
  <rosparam command="load" file="$(arg vehicle_calibration_dir)/identifiers/UniqueVehicleParams.yaml"/>
  <rosparam command="load" file="$(arg vehicle_config_dir)/VehicleConfigParams.yaml"/>

  <!-- Transforms Stack -->
  <group ns="$(env CARMA_TF_NS)">
    <include file="$(find carma)/launch/transforms.launch">
      <arg name="URDF_FILE" value="$(arg vehicle_calibration_dir)/urdf/carma.urdf"/>
    </include>
  </group>

  <!-- Hardware Interface Stack -->
  <group ns="$(env CARMA_INTR_NS)">
    <include file="$(find carma)/launch/hardware_interface.launch">
      <arg name="mock_drivers" value="$(arg mock_drivers)"/>
      <arg name="launch_drivers" value="$(arg launch_drivers)"/>
      <arg name="vehicle_calibration_dir" value="$(arg vehicle_calibration_dir)"/>
    </include>
  </group>

  <!-- Localization Stack -->
  <group ns="$(env CARMA_LOCZ_NS)">
    <include file="$(find carma)/launch/localization.launch">
      <arg name="arealist_path" value="$(arg arealist_path)"/>
      <arg name="area" value="$(arg area)"/>
      <arg name="load_type" value="$(arg load_type)"/>
      <arg name="single_pcd_path" value="$(arg single_pcd_path)"/>
      <arg name="vehicle_calibration_dir" value="$(arg vehicle_calibration_dir)"/>
      <arg name="vector_map_file" value="$(arg vector_map_file)" />
      <arg name="simulation_mode" value="$(arg simulation_mode)" />
    </include>
  </group>

  <!-- Environment Perception Stack -->
  <group ns="$(env CARMA_ENV_NS)">
    <include file="$(find carma)/launch/environment.launch">
      <arg name="cuda" value="$(arg cuda)"/>
      <arg name="vector_map_file" value="$(arg vector_map_file)" />
      <arg name="vehicle_calibration_dir" value="$(arg vehicle_calibration_dir)"/>
      <arg name="yolo_dir" value="$(arg yolo_dir)"/>
      <arg name="simulation_mode" value="$(arg simulation_mode)" />
      <arg name="combined_lidar_frame" value="$(arg combined_lidar_frame)"/>
    </include>
  </group>

  <!-- Guidance Stack -->
  <group ns="$(env CARMA_GUIDE_NS)">
    <!-- Health Monitor.
    Health monitor is required to launch with node tag here to correctly shut down
    other nodes through its required=true attribute-->
    <node pkg="health_monitor" type="health_monitor" name="health_monitor" required="true">
      <remap from="driver_discovery" to="$(optenv CARMA_INTR_NS)/driver_discovery"/>
      <remap from="system_alert" to="/system_alert"/>
      <remap from="~required_drivers" to="/required_drivers"/> 
      <remap from="~lidar_gps_drivers" to="/lidar_gps_drivers"/>
      <remap from="~camera_drivers" to="/camera_drivers"/>
      <remap from="~truck" to="/truck"/>
      <remap from="~car" to="/car"/> 
      <rosparam command="load" file="$(find health_monitor)/config/params.yaml"/>
    </node>
    
    <include file="$(find carma)/launch/guidance.launch">
      <arg name="route_file_folder" value="$(arg route_file_folder)"/>
      <arg name="vehicle_calibration_dir" value="$(arg vehicle_calibration_dir)"/>
      <arg name="enable_guidance_plugin_validator" value="$(arg enable_guidance_plugin_validator)"/>
      <arg name="strategic_plugins_to_validate" value="$(arg strategic_plugins_to_validate)"/>
      <arg name="tactical_plugins_to_validate" value="$(arg tactical_plugins_to_validate)"/>
      <arg name="control_plugins_to_validate" value="$(arg control_plugins_to_validate)"/>
    </include>
  </group>

  <!-- UI Stack -->
  <group ns="$(env CARMA_UI_NS)">
    <include file="$(find carma)/launch/ui.launch"/>
  </group>

  <!-- Set up the rosbag record node that will exclude sensitive topics -->
  <group ns="carma_record">
    <include file="$(find carma_record)/launch/carma_record.launch" if="$(arg use_rosbag)" />
  </group>

  <!-- Dump all ros parameters to a file -->
  <node name="param_dump" pkg="carma_record" type="param_dump.sh"/>
  
</launch>
